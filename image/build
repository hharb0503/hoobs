#!/usr/bin/env node

/**************************************************************************************************
 * hoobs-sdk                                                                                      *
 * Copyright (C) 2020 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const Semver = require("semver");
const Program = require("commander");
const Inquirer = require("inquirer");
const { join } = require("path");
const { execSync } = require("child_process");

const {
    existsSync,
    readFileSync,
    writeFileSync,
    rmSync,
} = require("fs");

const root = join(__dirname, "../");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

const prompt = Inquirer.createPromptModule();

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("image", { isDefault: true })
    .description("build hoobs image")
    .action(() => {
        let proceed = true;
        let docker = null;

        try {
            docker = execSync("command -v docker").toString().replace(/\n/g, "").trim();
        } catch (_error) {
            docker = null;
        }

        if (!docker || docker === "") {
            console.log("docker is not installed");
            proceed = false;
        }

        if (!existsSync(join(root, "./cli", "package.json")) || !existsSync(join(root, "./hoobsd", "package.json")) || !existsSync(join(root, "./gui", "package.json"))) {
            console.log("workspace not initilized");
            proceed = false;
        }

        if (!existsSync(join(root, "./hoobsd", ".env.production"))) {
            console.log("missing hoobsd production enviornment file");
            proceed = false;
        }

        if (!existsSync(join(root, "./gui", ".env.production"))) {
            console.log("missing hoobs gui production enviornment file");
            proceed = false;
        }

        if (proceed) {
            prompt([{
                type: "string",
                name: "version",
                default: pjson.version,
                message: "Enter the desired version",
                validate: (value) => {
                    if (!Semver.valid(value)) return "invalid version";

                    return true;
                },
            }, {
                type: "list",
                name: "sku",
                message: "Select a model to build",
                choices: [{
                    name: "HOOBS Box",
                    value: "box",
                }, {
                    name: "HOOBS SD Card",
                    value: "card",
                }],
            }]).then((result) => {
                pjson.version = result.version;
    
                writeFileSync(join(root, "package.json"), JSON.stringify(pjson, null, 4));
                execSync("docker rm -v hoobs-build", { cwd: join(root, "image"), stdio: "ignore" });

                if (existsSync(join(root, "hoobs"))) rmSync(join(root, "image/hoobs.conf"));

                const working = {
                    cli: JSON.parse(readFileSync(join(root, "./cli", "package.json")).toString()),
                    hoobsd: JSON.parse(readFileSync(join(root, "./hoobsd", "package.json")).toString()),
                    gui: JSON.parse(readFileSync(join(root, "./gui", "package.json")).toString()),
                    connect: JSON.parse(readFileSync(join(root, "./connect", "package.json")).toString()),
                }

                console.log("building hoobs cli");
                execSync(working.cli.scripts.build, { cwd: join(root, "./cli"), stdio: "inherit" });
                console.log("building hoobsd");
                execSync(working.hoobsd.scripts.build, { cwd: join(root, "./hoobsd"), stdio: "inherit" });
                console.log("building hoobs gui");
                execSync(working.gui.scripts.build, { cwd: join(root, "./gui"), stdio: "inherit" });
                console.log("building hoobs connect");
                execSync(working.connect.scripts.build, { cwd: join(root, "./connect"), stdio: "inherit" });
                console.log("building image");

                let vendor = "";

                switch (result.sku) {
                    case "box":
                        vendor += "ID=box\n";
                        vendor += "MODEL=HSLF-1\n";
                        vendor += "SKU=7-45114-12419-7\n";
                        break;

                    case "card":
                        vendor += "ID=card\n";
                        vendor += "MODEL=HSLF-2\n";
                        vendor += "SKU=7-45114-12418-0\n";
                        break;

                    default:
                        vendor += "ID=unknown\n";
                        vendor += "MODEL=\n";
                        vendor += "SKU=\n";
                        break;
                }

                writeFileSync(join(root, "./image/stage4/01-vendor-release/files", "hoobs"), vendor);

                execSync(`cp ${join(root, "./builds", `hoobs-cli-v${working.cli.version}.tar.gz`)} ${join(root, "./image/stage4/02-hoobs/files", "hoobs-cli.tar.gz")}`, { cwd: root, stdio: "inherit" });
                execSync(`cp ${join(root, "./builds", `hoobsd-v${working.hoobsd.version}.tar.gz`)} ${join(root, "./image/stage4/02-hoobs/files", "hoobsd.tar.gz")}`, { cwd: root, stdio: "inherit" });
                execSync(`cp ${join(root, "./builds", `hoobs-gui-v${working.gui.version}.tar.gz`)} ${join(root, "./image/stage4/02-hoobs/files", "hoobs-gui.tar.gz")}`, { cwd: root, stdio: "inherit" });
                execSync(`cp ${join(root, "./builds", `hoobs-connect-v${working.connect.version}.tar.gz`)} ${join(root, "./image/stage3/02-wifi-connect/files", "hoobs-connect.tar.gz")}`, { cwd: root, stdio: "inherit" });

                let variables = "";

                variables += "IMG_NAME=\"HOOBS\"\n";
                variables += `IMG_FILENAME="hoobs-${pjson.version}"\n`;
                variables += `ZIP_FILENAME="hoobs-${pjson.version}"\n`;
                variables += "LOCALE_DEFAULT=\"en_US.UTF-8\"\n";
                variables += "KEYBOARD_KEYMAP=\"us\"\n";
                variables += "KEYBOARD_LAYOUT=\"English (US)\"\n";
                variables += "TIMEZONE_DEFAULT=\"America/Denver\"\n";
                variables += "TARGET_HOSTNAME=hoobs\n";
                variables += "FIRST_USER_NAME=hoobs\n";
                variables += "FIRST_USER_PASS=hoobsadmin\n";
                variables += "ENABLE_SSH=1\n";
                variables += "STAGE_LIST=\"stage0 stage1 stage3 stage4 stage6 stage8\"\n";

                writeFileSync(join(root, "image/hoobs.conf"), variables);

                execSync("./container -c hoobs", { cwd: join(root, "image"), stdio: "inherit" });
            });
        }
    });

Program.command("volume [action]")
    .description("build hoobs image")
    .action((action) => {
        let docker = null;

        try {
            docker = execSync("command -v docker").toString().replace(/\n/g, "").trim();
        } catch (_error) {
            docker = null;
        }

        switch (action) {
            case "create":
                if (docker && docker !== "") {
                    console.log("creating build volumes");
                    execSync("docker rm -v hoobs-build", { cwd: join(root, "image"), stdio: "inherit" });
                    execSync("docker volume create hoobs", { cwd: join(root, "image"), stdio: "inherit" });
                } else {
                    console.log("docker is not installed");
                }

                break;

            case "remove":
                if (docker && docker !== "") {
                    console.log("removing build volumes");
                    execSync("docker rm -v hoobs-build", { cwd: join(root, "image"), stdio: "inherit" });
                    execSync("docker volume rm hoobs", { cwd: join(root, "image"), stdio: "inherit" });
                } else {
                    console.log("docker is not installed");
                }

                break;

            default:
                console.log(Program.helpInformation());
                break;
        }
    });

Program.parse(process.argv);
