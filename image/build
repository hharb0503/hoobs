#!/usr/bin/env node

/**************************************************************************************************
 * hoobs-image                                                                                    *
 * Copyright (C) 2020 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const OS = require("os");
const Semver = require("semver");
const Program = require("commander");
const Inquirer = require("inquirer");
const { join } = require("path");
const { execSync } = require("child_process");

const {
    existsSync,
    readFileSync,
    writeFileSync,
    unlinkSync,
    mkdirSync,
    rmSync,
} = require("fs");

const root = join(__dirname, "../");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

const prompt = Inquirer.createPromptModule();
const user = OS.userInfo();

function execLocal(command, options) {
    try {
        return execSync(command, options || { cwd: root, stdio: "inherit" }).toString().trim();
    } catch (_error) {
        return "";
    }
}

function existsLocal(path) {
    return existsSync(path);
}

function existsRemote(password, path) {
    return execRemote(password, `ls ${path}`, { cwd: root, stdio: "pipe" }) === path;
}

function execRemote(password, command, options) {
    return execLocal(`sshpass -p '${password}' ssh root@138.197.75.194 '${command}'`, options);
}

function uploadRemote(password, source, destination) {
    execLocal(`sshpass -p '${password}' scp ${source} root@138.197.75.194:${destination}`);
}

function checkEnviornment() {
    const sshpass = execLocal("command -v sshpass", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();
    const docker = execLocal("command -v docker", { stdio: "pipe" }).toString().replace(/\n/g, "").trim();

    if (!sshpass || sshpass === "") {
        console.log("sshpass is not installed");

        return false;
    }

    if (!docker || docker === "") {
        console.log("docker is not installed");

        return false;
    }

    if (!existsLocal(join(root, "./core", "package.json"))) {
        console.log("workspace not initilized");

        return false;
    }

    return true;
}

function buildImage(node) {
    const working = {
        connect: JSON.parse(readFileSync(join(root, "./connect", "package.json")).toString()),
    }

    if (!existsLocal(join(root, "builds", `hoobs-connect-v${working.connect.version}.tar.gz`))) {
        console.log("building hoobs connect");
        execLocal("bin/build", { cwd: join(root, "./connect"), stdio: "inherit" });
    }

    if (!existsLocal(join(root, "builds", `hoobs-v${pjson.version}.zip`))) {
        console.log("building image");
        execLocal("sudo docker rm -v hoobs-image", { cwd: join(root, "image"), stdio: "ignore" });

        if (existsLocal(join(root, "hoobs"))) rmSync(join(root, "image/hoobs.conf"));
        if (!existsLocal(join(root, "./image/stage3/01-wifi-connect/files"))) mkdirSync(join(root, "./image/stage3/01-wifi-connect/files"));

        execLocal(`cp ${join(root, "builds", `hoobs-connect-v${working.connect.version}.tar.gz`)} ${join(root, "./image/stage3/01-wifi-connect/files", "hoobs-connect.tar.gz")}`);

        let variables = "";

        variables += "IMG_NAME=\"HOOBS\"\n";
        variables += `IMG_FILENAME="hoobs-${pjson.version}"\n`;
        variables += `ZIP_FILENAME="hoobs-${pjson.version}"\n`;
        variables += `NODE_RELEASE="${node}"\n`;
        variables += "WIFI_SSID=HOOBS\n";
        variables += "LOCALE_DEFAULT=\"en_US.UTF-8\"\n";
        variables += "KEYBOARD_KEYMAP=\"us\"\n";
        variables += "KEYBOARD_LAYOUT=\"English (US)\"\n";
        variables += "TIMEZONE_DEFAULT=\"America/Denver\"\n";
        variables += "TARGET_HOSTNAME=hoobs\n";
        variables += "FIRST_USER_NAME=hoobs\n";
        variables += "FIRST_USER_PASS=hoobsadmin\n";
        variables += "ENABLE_SSH=1\n";
        variables += "STAGE_LIST=\"stage0 stage1 stage2 stage3 stage4 stage5\"\n";

        writeFileSync(join(root, "image/hoobs.conf"), variables);

        execLocal(`${join(root, "image/container")} -c ${join(root, "image/hoobs.conf")}`, { cwd: join(root, "image"), stdio: "inherit" });

        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}.zip`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}-box.zip`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}.info`)}`, { cwd: join(root, "image"), stdio: "inherit" });
        execLocal(`sudo chown ${user.uid}:${user.gid} ${join(root, "image/deploy", `hoobs-${pjson.version}-box.info`)}`, { cwd: join(root, "image"), stdio: "inherit" });

        if (existsLocal(join(root, "builds", `hoobs-v${pjson.version}.zip`))) unlinkSync(join(root, "builds", `hoobs-v${pjson.version}.zip`))
        if (existsLocal(join(root, "builds", `hoobs-box-v${pjson.version}.zip`))) unlinkSync(join(root, "builds", `hoobs-box-v${pjson.version}.zip`))
        if (existsLocal(join(root, "builds", `hoobs-v${pjson.version}.info`))) unlinkSync(join(root, "builds", `hoobs-v${pjson.version}.info`))
        if (existsLocal(join(root, "builds", `hoobs-box-v${pjson.version}.info`))) unlinkSync(join(root, "builds", `hoobs-box-v${pjson.version}.info`))

        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}.zip`)} ${join(root, "builds", `hoobs-v${pjson.version}.zip`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}-box.zip`)} ${join(root, "builds", `hoobs-box-v${pjson.version}.zip`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}.info`)} ${join(root, "builds", `hoobs-v${pjson.version}.info`)}`);
        execLocal(`sudo mv ${join(root, "image/deploy", `hoobs-${pjson.version}-box.info`)} ${join(root, "builds", `hoobs-box-v${pjson.version}.info`)}`);

        if (existsLocal(join(root, "image/deploy"))) execLocal(`sudo rm -fR ${join(root, "image/deploy")}`);
    }
}

function publishImage(password) {
    const exists = {
        card: existsRemote(password, `/var/www/html/image/hoobs-v${pjson.version}.zip`),
        box: existsRemote(password, `/var/www/html/image/hoobs-box-v${pjson.version}.zip`),
    }

    if (!exists.card || !exists.box) {
        console.log("uploading images");

        if (!exists.card) uploadRemote(password, join(root, "builds", `hoobs-v${pjson.version}.zip`), "/var/www/html/image/");
        if (!exists.box) uploadRemote(password, join(root, "builds", `hoobs-box-v${pjson.version}.zip`), "/var/www/html/image/");
    }
}

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("publish")
    .description("publish builds to repository")
    .action(() => {
        let proceed = checkEnviornment();

        if (proceed && (
            !existsLocal(join(root, "builds", `hoobs-v${pjson.version}.zip`))
         || !existsLocal(join(root, "builds", `hoobs-box-v${pjson.version}.zip`))
        )) {
            console.log("please build image before publishing");
            proceed = false;
        }

        if (proceed) {
            prompt([{
                type: "password",
                name: "password",
                message: "Enter the repository server password",
            }]).then((result) => {
                publishImage(result.password);
            });
        }
    });

Program.command("image")
    .description("build hoobs image")
    .action(() => {
        let proceed = checkEnviornment();

        if (proceed) {
            prompt([{
                type: "string",
                name: "node",
                default: "14",
                message: "Select node major version",
                validate: (value) => {
                    if (Number.isNaN(parseInt(value, 10))) return "invalid version";

                    return true;
                },
            }]).then((result) => {
                buildImage(result.node);
            });
        }
    });

Program.command("volume [action]")
    .description("build hoobs image")
    .action((action) => {
        switch (action) {
            case "create":
                if (checkEnviornment()) {
                    console.log("creating build volumes");

                    execLocal("sudo docker rm -v hoobs-image", { cwd: join(root, "image"), stdio: "ignore" });
                    execLocal("sudo docker volume create hoobs", { cwd: join(root, "image"), stdio: "inherit" });
                }

                break;

            case "remove":
                if (checkEnviornment()) {
                    console.log("removing build volumes");

                    execLocal("sudo docker rm -v hoobs-image", { cwd: join(root, "image"), stdio: "ignore" });
                    execLocal("sudo docker volume rm hoobs", { cwd: join(root, "image"), stdio: "inherit" });
                }

                break;

            default:
                console.log(Program.helpInformation());
                break;
        }
    });

Program.parse(process.argv);
